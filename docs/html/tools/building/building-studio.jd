page.title=Building and Running from Android Studio
parent.title=Building and Running
parent.link=index.html
@jd:body

<div id="qv-wrapper">
  <div id="qv">
    <h2>In this document</h2>
      <ol>
        <li><a href="#run-configuration">Changing the run configuration</a> </li>
        <li><a href="#changing-variant">Changing build variants</a></li>
        <li><a href="#gradle-console">Monitoring the build process</a></li>
        <li><a href="#generating-apks">Generating APKs</a></li>
      </ol>

    <h2>See also</h2>
      <ol>
        <li><a href="{@docRoot}sdk/installing/studio-build.html">
          Build System</a></li>
        <li><a href="{@docRoot}tools/devices/managing-avds.html">
          Managing AVDs with AVD Manager</a></li>
        <li><a href="{@docRoot}tools/devices/emulator.html">
          Using the Android Emulator</a></li>
        <li><a href="{@docRoot}tools/device.html">
          Using Hardware Devices</a></li>
        <li><a href="{@docRoot}tools/publishing/app-signing.html">
          Signing Your Applications</a></li>
      </ol>
  </div>
</div>

<p>
  By default, Android Studio sets up new projects to deploy to the Emulator or
  a physical device with just a few clicks.
</p>

<p>
  To build and run your app, click <strong>Run 'app'</strong> <img src=
  "{@docRoot}images/tools/as-run.png" alt="" style=
  "vertical-align:bottom;margin:0;">. Android Studio builds your app with
  Gradle, asks you to select a deployment target (an emulator or a connected
  device), and then deploys your app to it. You can customize some of this
  default behavior, such as selecting an automatic deployment target, by
  <a href="#run-configuration">changing the run configuration</a>.
</p>

<p>
  If you want to <a href="{@docRoot}tools/devices/emulator.html">use the Android
  Emulator</a> to run your app, you need to have an Android Virtual Device
  (AVD) ready. If you haven't already created one, then after you click
  <strong>Run 'app'</strong>, click <strong>Create New Emulator</strong> in the
  <strong>Select Deployment Target</strong> dialog. Follow the Virtual Device
  Configuration wizard to define the type of device you want to emulate. For
  more information, see <a href=
  "{@docRoot}tools/devices/managing-avds.html">Managing AVDs with the AVD
  Manager</a>.
</p>

<p>
  If you're using a physical Android device, you need to enable USB debugging
  on the device. For more information, see <a href=
  "{@docRoot}tools/device.html">Using Hardware Devices</a>.
</p>

<p class="note">
  <strong>Note:</strong> You can also deploy your app in debug mode by clicking
  <strong>Debug 'app'</strong> <img src=
  "{@docRoot}images/tools/as-debugbutton.png" alt="" style=
  "vertical-align:bottom;margin:0;">. Running your app in debug mode
  allows you to set breakpoints in your code, examine variables and evaluate
  expressions at run time, and run debugging tools. To learn more, read about
  <a href="{@docRoot}tools/debugging/debugging-studio.html">Debugging with
  Android Studio</a>.
</p>

<h3 id="run-configuration">
  Changing the run configuration
</h3>

<p>
  The run configuration specifies the module to run, package to deploy,
  activity to start, target device, emulator settings, and Logcat options. The
  default run configuration launches the default project activity and uses the
  <strong>Device Chooser</strong> for target device selection. If the default
  settings don't suit your project or module, you can customize the run
  configuration, or even create a new one, at the project, default, and module
  levels. To edit a run configuration:
</p>

<ol>
  <li>Select <strong>Run</strong> &gt; <strong>Edit Configurations</strong>.
  </li>

  <li>Expand the <strong>Android Application</strong> item and select an
  existing run configuration.
    <ul>
      <li>To create a new run configuration, click the '<strong>+</strong>'
      button in the top left corner of the dialog box and select
      <strong>Android Application</strong>.
      </li>
    </ul>
  </li>

  <li>With a run configuration selected, adjust your desired settings. For
  example, in the <strong>General</strong> tab, you can specify the APK
  installation settings, launch options, and deployment target options.
  </li>
</ol>

<h3 id="changing-variant">
  Changing the build variant
</h3>

<p>
  By default, Android Studio builds the debug version of your app, which is
  intended only for testing, when you click <strong>Run 'app'</strong>. You
  need to build the release version when <a href=
  "{@docRoot}tools/publishing/preparing.html">preparing your app for public
  release</a>.
</p>
<p>
  To change the build variant Android Studio uses, go to <strong>Build</strong>
  &gt; <strong>Select Build Variant</strong> and select a different one from
  the drop-down menu. By default, new projects are set up with a debug and
  release build variant.
</p>

<p>
  Using <em>product flavors</em>, you can create additional build variants for
  different versions of your app, each having different features or device
  requirements. To learn more about build variants and product flavors, read
  <a href="{@docRoot}tools/building/configuring-gradle.html">Configuring Gradle
  Builds</a>.
</p>

<h3 id="gradle-console">
  Monitoring the build process
</h3>

<p>
  You can view details about the build process by clicking <em>Gradle
  Console</em> <img src="{@docRoot}images/tools/as-gradlebutton.png" alt=""
  style="vertical-align:bottom;margin:0;">. The console displays each
  task that Gradle executes in order to build your app, as shown in figure 1.
</p>

<img src="{@docRoot}images/tools/studio-gradle-console.png" alt="">
<p class="img-caption">
  <strong>Figure 1.</strong> The Gradle Console in Android Studio.
</p>

<p>
  If your build variants use product flavors, Gradle also invokes tasks to
  build those product flavors. To view the list of all available build tasks,
  click <strong>Gradle</strong> <img src=
  "{@docRoot}images/tools/as-gradle.png" alt="" style=
  "vertical-align:bottom;margin:0;"> on the right side of the IDE
  window.
</p>

<p>
  If an error occurs during the build process, the <em>Messages</em> window
  will appear to describe the issue.
</p>

<h3 id="generating-apks">
  Generating APKs
</h3>

<p>
  When you click <strong>Run 'app'</strong>, Android Studio generates a debug
  APK and deploys it to your target device. Before you can generate a release
  version of your app for public distribution, however, you must first learn
  how to <a href="{@docRoot}tools/publishing/app-signing.html#studio">sign your
  app</a>. You can then generate multiple signed APKs of your debug or release
  build variants. To locate the generated APK files, click the link in the
  pop-up dialog, as shown in figure 2.
</p>

<p>
  <img src="{@docRoot}images/tools/as-find-apk.png" alt="">
</p>

<p class="img-caption">
  <strong>Figure 2.</strong> Click the link to locate the generated APK
  files.
</p>