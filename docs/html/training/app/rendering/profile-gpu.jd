page.title=Improve GPU Rendering Performance
meta.tags="android, performance", "app"
page.tags="app"
page.article=true
@jd:body

<style>
  .app-icon {
      height: 64px;
  }
</style>


<p>The most common issues that can make your app slow are related to the process of drawing on
  the screen. Android provides the
  <a href="{@docRoot}tools/performance/profile-gpu-rendering/index.html">Profile GPU Rendering</a>
  tool on your
  device to analyze the rendering performance of your app. The Profile GPU Rendering tool draws a
  graph on the screen to show the rendering performance of each window.</p>

  <p>This page introduces how to use the Profile GPU Rendering tool and interpret its graphs, and,
  depending on your findings, suggests what to try next to optimize your app's
  performance.</p>

  <p>For a quick overview of the tool and how to use it, watch the embedded
  <a href="https://www.youtube.com/watch?v=VzYkVL1n4M8">Profile GPU Rendering</a> video.
  Then profile your app and analyze the results following the steps
  below.</p>

  <iframe width="448" height="252"
    src="//www.youtube.com/embed/VzYkVL1n4M8?autohide=1&amp;showinfo=0"
    frameborder="0" allowfullscreen=""
    style="float: none; margin: 0 0 20px 20px;"></iframe>



<h2><img class="app-icon" src="{@docRoot}images/training/app/app_icon_gather.png">
    Graph the rendering performance of your app</h2>

  <p>Turn on Profile GPU Rendering:</p>

  <ol>
    <li>On your mobile device, go to <b>Settings &gt;</b> <b>Developer Options</b>.</li>

    <li>In the <i>Monitoring</i> section, select <b>Profile GPU Rendering</b>.</li>

    <li>In the Profile GPU Rendering popup, choose <b>On screen as bars</b> to overlay the graphs
    on the screen of your mobile device.</li>

    <li>Run your app and interact with it to see the graph grow and change.</li>
  </ol>

  <p>You are going to see a chart of multi-colored bars on your screen, similar to Figure 1. Each
  vertical bar represents one frame of rendering for that activity, that is, one redrawing of the
  window on the screen.</p>

  <div>
    <img src="{@docRoot}images/training/app/profile_gpu_rendering_annotated_graph.png"
         alt=""
         height="" />
    <p class="img-caption">
      <strong>Figure 1. </strong>Profile GPU Rendering graph.
    </p>
  </div>

  <p>The height and coloring of a bar, as shown in Figure 1, indicate how fast each frame was
  created, and how much time different phases of the rendering process required.</p>

  <p>The green line marks 16 milliseconds. If a bar crosses that line, it took more than 16
  milliseconds to create and draw that window on the screen. If this happens often, or if any bars
  cross the line by a lot, users can probably notice a delay or stutter while using the app.</p>



<h2><img class="app-icon" src="{@docRoot}images/training/app/app_icon_insight.png">
    Interpret the Profile GPU Rendering graph</h2>

  <p>Look at the colored segments of the bars that cross the green 16 millisecond line, in
  particular any segments that are much taller than their neighbors.</p>

  <p>If you see that</p>

  <ul>
    <li><b>blue Update</b> segments are tall, updating views in the CPU takes too long. Jump to
    <a href="#blue">Speed up view updating</a>.</li>

    <li><b>purple Transfer</b> segments are tall, transferring resources from the CPU to the GPU is
    too slow. See <a href="#purple">
        Transfer less data</a>.</li>

    <li><b>red Execute</b> segments are tall, submitting commands to the GPU takes too long. Go to
    <a href="#red">Reduce the number of commands</a>.</li>

    <li><b>orange Process</b> segments are tall, the CPU is waiting for the GPU. Read
    <a href="#orange">Give less work to the GPU</a>.</li>
  </ul>

<h2><img class="app-icon" src="{@docRoot}images/training/app/app_icon_insight.png">
    Advanced Analysis</h2>

  <p>To improve the performance of your app, you may need to take one, some, or all of the actions
  on this page. You may need to use more additional tools or investigate other sources of performance
  issues.</p>

  <p>For example:</p>

  <ul>
    <li>Run the
    <a href="{@docRoot}tools/performance/systrace/index.html">Systrace</a> tool
    to log specific app execution data over time and find
    performance bottlenecks.</li>

    <li>Gather more granular data about how your app draws on a frame-by-frame basis, with the
    <a href="https://source.android.com/devices/tech/debug/dumpsys.html">dympsys tool</a>.
    Run
    <a href="https://developer.android.com/preview/testing/performance.html">
        adb shell dumpsys gfxinfo framestats</a> (version M or later).</li>

    <li>Your app may be stuttering because it is doing too much work in the UI thread (version L or
    later). Use
    <a href="{@docRoot}tools/performance/traceview/index.html">Traceview</a>
    to log method execution over time, and examine thread
    timelines and call stacks.</li>
  </ul>


<h2 id="blue"><img class="app-icon" src="{@docRoot}images/training/app/app_icon_insight.png">
    Blue: Updating views takes too long</h2>

  <p>The blue Update segment of the bar represents the time used by the CPU to create and update
  all the views for this rendering of the screen. This is part of a processing sequence called the
  invalidation pipeline. To learn more about the invalidation pipeline, see
  <a href="https://www.youtube.com/watch?v=we6poP0kw6E">Views, Invalidations, and Performance</a>
  and <a href="https://www.youtube.com/watch?v=dB3_vgS-Uqo">Double Layout Taxation</a>.</p>

  <iframe width="448" height="252"
    src="//www.youtube.com/embed/we6poP0kw6E?autohide=1&amp;showinfo=0"
    frameborder="0" allowfullscreen=""
    style="float: none; margin: 0 0 20px 20px;"></iframe>

  <iframe width="448" height="252"
    src="//www.youtube.com/embed/dB3_vgS-Uqo?autohide=1&amp;showinfo=0"
    frameborder="0" allowfullscreen=""
    style="float: none; margin: 0 0 20px 20px;"></iframe>

  <p>If this blue bar segment is tall, it can indicate that your app does too much work creating
  and updating views, or is updating too many views or views that are too complex.</p>

<h2><img class="app-icon" src="{@docRoot}images/training/app/app_icon_action.png">
    Blue: Speed up view updating</h2>

  <p><b>Reduce overdraw.</b></p>

  <ul>
    <li>Use the
    <a href="{@docRoot}tools/performance/debug-gpu-overdraw/index.html">Debug GPU Overdraw tool</a>
    and optimize areas that appear red in the tool.
    See <a href="{@docRoot}training/app/rendering/overdraw.html">
    Visualizing and Reducing Overdraw</a>.</li>
  </ul>

  <p><b>Simplify complex view hierarchies.</b></p>

  <ul>
    <li>Use the
    <a href="{@docRoot}tools/performance/hierarchy-viewer/index.html">Hierarchy Viewer tool</a>
    to analyze and profile your app's
    view hierarchy, and simplify complex views.
    See <a href="{@docRoot}training/app/rendering/hierarchies.html">
    Simplifying Complex View Hierarchies</a>.</li>
  </ul>

  <p><b>Optimize onDraw() for custom views.</b></p>

  <ul>
    <li>If you are using custom views, investigate your onDraw() methods. Doing large amounts of
    work in onDraw() can slow down the Update phase of the rendering process. Move anything not
    directly related to drawing outside of the onDraw() method, perhaps even into a separate
    thread.</li>

    <li>Don't paint large bitmaps in your onDraw() method. See
    <a href="https://developer.android.com/training/displaying-bitmaps/index.html">
        Displaying Bitmaps Efficiently</a>.</li>

    <li>Calculate anything that you can ahead of time (not in onDraw()). See
    <a href="http://developer.android.com/training/custom-views/optimizing-view.html">Optimizing the View</a>.</li>
  </ul>



<h2 id="purple"><img class="app-icon" src="{@docRoot}images/training/app/app_icon_insight.png">
    Purple: Transferring resources is too slow</h2>

  <p>The purple segment of the bar represents the time the GPU Driver spent transferring resources
  from the CPU to the GPU. Moving a significant amount of data between processors takes time, and
  the larger the data to be moved, the longer the delay in execution.
  See <a href="https://www.youtube.com/watch?v=zVK6TKSx1lU">CPU, GPU, and your Android</a>.</p>

  <iframe width="448" height="252"
    src="//www.youtube.com/embed/zVK6TKSx1lU?autohide=1&amp;showinfo=0"
    frameborder="0" allowfullscreen=""
    style="float: none; margin: 0 0 20px 20px;"></iframe>


<h2><img class="app-icon" src="{@docRoot}images/training/app/app_icon_action.png">
    Purple: Reduce bitmap sizes</h2>

  <ul>
    <li>Use the smallest bitmap dimensions possible by resizing and pre-scaling bitmaps. See
    <a href="https://www.youtube.com/watch?v=HY9aaXHx8yA">Reusing Bitmaps</a>
    and this <a href="https://www.youtube.com/watch?v=12cB7gnL6po">Bitmap Scaling code example</a>.</li>

    <iframe width="448" height="252"
    src="//www.youtube.com/embed/HY9aaXHx8yA?autohide=1&amp;showinfo=0"
    frameborder="0" allowfullscreen=""
    style="float: none; margin: 0 0 20px 20px;"></iframe>

    <li>Use a different, smaller pixel format.
    See <a href="https://www.youtube.com/watch?v=1WqcEHXRWpM">Smaller Pixel Formats</a>.</li>

     <iframe width="448" height="252"
    src="//www.youtube.com/embed/1WqcEHXRWpM?autohide=1&amp;showinfo=0"
    frameborder="0" allowfullscreen=""
    style="float: none; margin: 0 0 20px 20px;"></iframe>

    <li>Optimize your app's UI objects. Reduce overdraw, reuse UI
    elements, prefer standard over custom resources, be frugal with fonts, and control alpha
    rendering.
    See also <a href="https://www.youtube.com/watch?v=wIy8g8yNhNk">
    The Hidden Cost of Transparency</a>.</li>

    <iframe width="448" height="252"
    src="//www.youtube.com/embed/wIy8g8yNhNk?autohide=1&amp;showinfo=0"
    frameborder="0" allowfullscreen=""
    style="float: none; margin: 0 0 20px 20px;"></iframe>

  </ul>




<h2 id="red"><img class="app-icon" src="{@docRoot}images/training/app/app_icon_insight.png">
    Red: Submitting commands to the GPU is too slow</h2>

  <p>The red segment of the bar represents the time spent by Android's 2D renderer issuing commands
  to OpenGL to draw and redraw display lists. The height of the red bar is proportional to how much
  time was spent submitting commands to the GPU for the total of all views that need to be redrawn.
  Display lists that do more complex operations contribute more time to the overall size of the red
  bar. The size of the red bar is an indicator of the <i>complexity</i> of the display
  lists' operations. The <i>number</i> of display lists does not directly
  correlate to the size of the red bar.</p>

  <ul>
    <li>Learn more about how the CPU creates and submits commands to the GPU, and how the GPU
    Driver can become a bottleneck in your app's rendering pipeline. Watch <a href=
    "https://www.youtube.com/watch?v=zVK6TKSx1lU">CPU, GPU, and your Android</a>.</li>

    <iframe width="448" height="252"
    src="//www.youtube.com/embed/zVK6TKSx1lU?autohide=1&amp;showinfo=0"
    frameborder="0" allowfullscreen=""
    style="float:none; margin: 0 0 20px 20px;"></iframe>


    <li>Find out when Views get invalidated, how that affects performance, and how to reduce this
    performance problem. Check out <a href=
    "https://www.youtube.com/watch?v=we6poP0kw6E">Views, Invalidations, and Performance</a>.</li>

    <iframe width="448" height="252"
    src="//www.youtube.com/embed/we6poP0kw6E?autohide=1&amp;showinfo=0"
    frameborder="0" allowfullscreen=""
    style="float:none; margin: 0 0 20px 20px;"></iframe>


    <li>Under some conditions, views get laid out multiple times, which can be a significant
    performance hit for large view hierarchies. Learn more by watching <a href=
    "https://www.youtube.com/watch?v=dB3_vgS-Uqo">Double Layout
    Taxation</a>.</li>

    <iframe width="448" height="252"
    src="//www.youtube.com/embed/dB3_vgS-Uqo=1&amp;showinfo=0"
    frameborder="0" allowfullscreen=""
    style="float:none; margin: 0 0 20px 20px;"></iframe>

</ul>


<h2><img class="app-icon" src="{@docRoot}images/training/app/app_icon_action.png">
    Red: Reduce the number of commands</h2>
  <p><b>Reduce overdraw.</b></p>

  <ul>
    <li>Run the
    <a href="{@docRoot}tools/performance/debug-gpu-overdraw/index.html">Debug GPU Overdraw tool</a>
    to show which view objects are doing
    unnecessary redrawing. See also
    <a href="{@docRoot}training/app/rendering/overdraw.html">
    Visualizing and Reducing Overdraw</a>.</li>
  </ul>

  <p><b>Limit alpha blending.</b></p>

  <ul>
    <li>Look for transparent views doing alpha blending. See <a href=
    "https://www.youtube.com/watch?v=wIy8g8yNhNk">The Hidden Cost of Transparency</a>.</li>

    <iframe width="448" height="252"
    src="//www.youtube.com/embed/wIy8g8yNhNk?autohide=1&amp;showinfo=0"
    frameborder="0" allowfullscreen=""
    style="float: none; margin: 0 0 20px 20px;"></iframe>
  </ul>


<h2 id="orange"><img class="app-icon" src="{@docRoot}images/training/app/app_icon_insight.png">
    Orange: The CPU is waiting for the GPU</h2>

  <p>The orange segment of the bar represents the length of time that the CPU is waiting for the
  GPU to finish its work. After transferring data to the GPU, the CPU waits for the GPU to
  acknowledge receipt. If this bar segment gets tall, it means the app is doing too much complex
  work on the GPU, and the GPU is unable to keep up with the data flow from the CPU.</p>

<h2><img class="app-icon" src="{@docRoot}images/training/app/app_icon_action.png">
    Give less work to the GPU</h2>

  <p><b>Simplify complex view hierarchies.</b></p>

  <ul>
    <li>Use the
   <a href="{@docRoot}tools/performance/hierarchy-viewer/index.html">Hierarchy Viewer tool</a>
    to see whether you can reduce the number
    of views. See
    <a href="{@docRoot}training/app/rendering/hierarchies.html">
      Simplifying Complex View Hierarchies</a>.</li>
  </ul>

  <p><b>Optimize drawing.</b></p>

  <ul>
    <li>Reduce the number of calls to Canvas drawing methods by batching operations. Learn more
    about <a href="https://www.youtube.com/watch?v=PEgkXFPcDTE">Batching</a>.</li>

     <iframe width="448" height="252"
    src="//www.youtube.com/embed/PEgkXFPcDTE?autohide=1&amp;showinfo=0"
    frameborder="0" allowfullscreen=""
    style="float: none; margin: 0 0 20px 20px;"></iframe>

    <li>Look at draw calls that include bitmap uploads (for pre-L versions), paths, or shadow work,
    and simplify them. See
    <a href="https://www.youtube.com/watch?v=wIy8g8yNhNk">The Hidden Cost of Transparency</a>.</li>

    <iframe width="448" height="252"
    src="//www.youtube.com/embed/wIy8g8yNhNk?autohide=1&amp;showinfo=0"
    frameborder="0" allowfullscreen=""
    style="float: none; margin: 0 0 20px 20px;"></iframe>

  </ul>

