page.title=Simplify Complex View Hierarchies
meta.tags="android, performance", "app",
page.tags="app"
page.article=true
@jd:body

<style>
  .app-icon {
      height: 64px;
  }
</style>


<p>At the heart of your app is the hierarchy of views that makes up the user interface and the
  visual experience of users. With feature-rich apps, this hierarchy grows large and complex and
  can become a source of performance problems. The most likely symptom you will see is a generic
  general slowness of the app, especially when rendering complex views to the screen.</p>

  <p>Simplifying or rearranging the view hierarchy of your app can improve performance, especially
  on lower-end devices and earlier versions of Android. As an added benefit, your app will become
  easier to maintain overall.</p>

  <p>Analyzing the view hierarchy is an example of using several tools together to pinpoint and fix
  performance problems. It is also an example of eliminating another inefficiency first, so that
  your data becomes more precise.</p>


<h2><img class="app-icon" src="{@docRoot}images/training/app/app_icon_gather.png">
    Analyze the view hierarchy</h2>

  <p>If you have not done so already, reduce overdraw by removing unnecessary backgrounds. This
  will remove a common source of overdraw that is not related to your view hierarchy. See
  <a href="{@docRoot}training/app/rendering/overdraw.html">
    Visualizing and Reducing Overdraw</a>.</p>

  <ol>
    <li><b>Run the Show GPU View Updates tool</b> on your mobile device. In <b>Developer
    Options</b>, scroll to <b>Hardware accelerated rendering</b> and turn on <b>Show GPU view
    updates</b>.</li>

    <li>Interact with your app.</li>

    <li>Views on the screen that are updated will flash red. If you
    notice that parts of your screen are flashing, and they have nothing to do with the area that's
    being updated, there may be a connection in the view hierarchy that's causing them to be
    invalidated improperly. As such, you can focus your efforts on these areas to find problems
    faster.</li>

    <li><b>Run the
      <a href="{@docRoot}tools/performance/profile-gpu-rendering/index.html">
          Profile GPU Rendering tool</a>
    and look at the blue segments of
    the bars.</b> If the blue segments are tall and causing the bars to cross the 16
    milliseconds-per-frame line,
    your app spends a lot of time updating display lists. The M release of Android adds additional
    color segments, and the Measure/Layout segment may also be larger than expected. One reason for
    this can be view hierarchies that are unnecessarily complex. See also
    <a href="{@docRoot}training/app/rendering/profile-gpu.html">
        Improving GPU Rendering Performance</a>.</li>

    <li><b>Start the
    <a href="{@docRoot}tools/performance/hierarchy-viewer/index.html">
        Hierarchy Viewer tool</a>.</b></li>

    <li>Find the areas of the view hierarchy where you still see a lot of overdraw in your app.
    Consider whether restructuring your views could reduce overdraw.</li>

    <li>Identify areas where your view hierarchy is complex, and consider how you could simplify
    it.</li>

    <li>Profile the view hierarchy from Hierarchy Viewer to confirm or identify additional
    potential problem spots. See
    <a href="{@docRoot}tools/performance/hierarchy-viewer/profiling.html">
        Profiling with Hierarchy Viewer</a>.</li>
  </ul>

<h2><img class="app-icon" src="{@docRoot}images/training/app/app_icon_insight.png">
    Possible optimizations</h2>

  <p>Hierarchy Viewer can help identify these specific issues that are directly related to the
  structure of the view hierarchy.</p>

  <ul>
    <li>Views that do not contribute to the final image. See
    <a href="#remove">Remove extraneous views</a>
    .</li>

    <li>Deep view hierarchies of nested views. Jump to
    <a href="#nested">Simplify nested layouts</a>
    .</li>

    <li>Large number of simple views. Check out
    <a href="#reduce">Reduce the number of views</a>
    .</li>

    <li>Nested layouts that trigger multiple layout passes. Got to
    <a href="#flatten"> Flatten the view hierarchy</a>
    .</li>
  </ul>

  <p>Minimizing these issues can improve performance, especially on older devices. For your own
  benefit, these simplifications will make your code easier to maintain and profile in the
  future.</p>

<h2 id="remove"><img class="app-icon" src="{@docRoot}images/training/app/app_icon_action.png">
    Remove extraneous views</h2>

  <p>Remove views that do not contribute to the final image.<p>

  <p>To identify views that do not contribute to the final image on the screen:</p>

  <ol>
    <li>In Hierarchy Viewer, walk through the hierarchy starting from the leaves towards the
    root.</li>

    <li>Click each node to see how the screen looks at that node. Alternatively, look at the Layout
    View window to see how views are layering themselves.</li>

    <li>If a view that was previously visible becomes fully hidden, then you may not need that view
    at all, as shown in Figure 1.</li>
  </ol>

  <div>
    <img src="{@docRoot}images/training/app/remove_hidden_views.png"
         alt=""
         height="" />
    <p class="img-caption">
      <strong>Figure 1. </strong>Views 2 and 3 are fully obscured and can be safely removed.
    </p>
  </div>

  <p>Eliminate from your code the views that are completely covered, never displayed, or outside
  the screen.</p>

<h2 id="nested"><img class="app-icon" src="{@docRoot}images/training/app/app_icon_action.png">
    Simplify nested layouts</h2>

  <p>Simplify nested layouts that trigger multiple layout passes.</p>

  <p>Some layout containers, such a RelativeLayout, require two layout passes in order to finalize
  the positions of their child views. As a result, their children also require two layout passes.
  When you nest these types of layout containers, the number of layout passes increases
  exponentially with each level of the hierarchy.</p>

  <p>For example, a view inside a grid view inside a list view inside a relative layout could get
  laid out 8 times(!) as shown in Figure 2.</p>

  <div>
    <img src="{@docRoot}images/training/app/layout_pass_multiplication.png"
         alt=""
         height="" />
    <p class="img-caption">
      <strong>Figure 2. </strong>Example of layout pass multiplication.
    </p>
  </div>

  <p><b>Watch out for the following containers and conditions:</b></p>

  <ul>
    <li><a href="http://developer.android.com/reference/android/widget/RelativeLayout.html">
        RelativeLayout</a></li>

    <li><a href="http://developer.android.com/reference/android/widget/LinearLayout.html">
        LinearLayouts</a>
        that also use the <code>measureWithLargestChild</code> layout weight</li>

    <li><a href="http://developer.android.com/reference/android/widget/GridView.html">
    GridViews</a> that also use gravity.</li>

    <li>Custom containers that are subclasses of the above.</li>

    <li>Some uses of weights in layouts can also trigger multiple layout passes.</li>
  </ul>

  <p><b>Using any of these containers as</b></p>

  <ul>
    <li>the root of a complex view hierarchy,</li>

    <li>the parent of a deep subtree,</li>

    <li>or using many of them in your layout,</li>
  </ul>

  <p>can result in noticeable performance penalties.</p>

  <p>For more information, see
  <a href="https://www.youtube.com/watch?v=dB3_vgS-Uqo">Double Layout Taxation</a>.</p>

    <iframe width="448" height="252"
    src="//www.youtube.com/embed/dB3_vgS-Uqo?autohide=1&amp;showinfo=0"
    frameborder="0" allowfullscreen=""
    style="float:none; margin: 0 0 20px 20px;"></iframe>


  <p>Consider whether you can achieve the same layout using a container configuration that does not
  result in these exponential numbers of layout passes. For example:</p>

  <ul>
    <li>Replace a RelativeLayout with a GridView (without gravity) as your root view.</li>
  </ul>

  <p>In addition, you can apply all the techniques mentioned in this document to simplify the view
  hierarchy.</p>

  <ul>
    <li>Reduce the number of layouts by eliminating or combining views. See
    <a href="#remove">
        Remove Views that do not Contribute to the Final Image</a>
    and
    <a href="#reduce">
        Reduce the Number of Views</a>.
    </li>

    <li>Eliminate overlapping views where possible.</li>

    <li>Flatten the view hierarchy by choosing different layouts. See
    <a href="#flatten">Flatten the View Hierarchy</a>
    </li>

    <li>Redesign your app's user interface to use fewer views.</li>
  </ul>


  <p>For more tips, see
  <a href="http://developer.android.com/training/improving-layouts/optimizing-layout.html">
      Optimizing Layout Hierarchies</a>.</p>



<h2 id="reduce"><img class="app-icon" src="{@docRoot}images/training/app/app_icon_action.png">
    Reduce the number of views</h2>

  <p>If your user interface has many simple views, you may be able to combine some of them without
  diminishing the user experience, as shown in Figure 3.</p>


<div>
    <img src="{@docRoot}images/training/app/combine_views.png"
         alt=""
         height="" />
    <p class="img-caption">
      <strong>Figure 3. </strong>Example of combining views.
    </p>
  </div>

  <p>Both the changes below may affect how you present information to the user and will include
  design trade-offs. Remember that performance is more important than anything else for your
  app's success, and opt for simplicity wherever you can.</p>

  <ul>
    <li>Reduce the number of views by combining them into fewer views. For example, you can combine
    text views if you reduce the number of fonts and styles.</li>

    <li>Redesign your app's user interface to use fewer views.</li>
  </ul>



<h2 id="flatten"><img class="app-icon" src="{@docRoot}images/training/app/app_icon_action.png">
    Flatten the view hierarchy</h2>

  <p>Does your view hierarchy have parts that look like the nested arrangement on the left of
  Figure 4?</p>

<div>
    <img src="{@docRoot}images/training/app/flatten_view_hierarchy.png"
         alt=""
         height="" />
    <p class="img-caption">
      <strong>Figure 4. </strong>This deep view hierarchy can be flattened to improve performance.
    </p>
  </div>

  <p>Flatten the view hierarchy by replacing nested linear layouts with relative layouts wherever
  possible. See
  <a href="http://developer.android.com/training/improving-layouts/optimizing-layout.html">
      Optimizing Layout Hierarchies</a>.</p>



<h2>Example of simplifying a view hierarchy</h2>

  <p>Watch a screencast which shows how to apply all these techniques to simplify a view
  hierarchy. See
  <a href="https://www.youtube.com/watch?v=-FUw8HMbmBQ&amp">
      Optimizing Layouts with Hierarchy Viewer</a>.</p>

<h2>Advanced analysis</h2>

  <p>Use the
  <a href="http://developer.android.com/tools/debugging/improving-w-lint.html">Lint tool</a>
  on your layout files to search for possible view hierarchy optimizations. See
  <a href="http://developer.android.com/training/improving-layouts/optimizing-layout.html#Lint">
      Optimizing Layout Hierarchies: Use Lint</a>.</p>

